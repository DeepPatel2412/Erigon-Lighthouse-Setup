#!/bin/bash
set -e

# ---- Colors ----
NC='\033[0m'
BOLD='\033[1m'
GREEN='\033[32m'
RED='\033[31m'
YELLOW='\033[33m'
CYAN='\033[36m'
LINK='\033[36m'

fail() { echo -e "${RED}ERROR:${NC} $1"; exit 1; }

# ---- Pre-flight Check ----
echo -e "${CYAN}========================================"
echo -e "     ETHEREUM SEPOLIA NODE INSTALLER"
echo -e "========================================${NC}"
echo -e "${BOLD}Recommended System Specifications:${NC}"
echo -e "· Storage: 750GB-1TB SSD"
echo -e "· CPU: 4+ cores"
echo -e "· RAM: 16GB+"
echo -e "${CYAN}----------------------------------------${NC}"
echo "Checking your system resources..."

AVAILABLE_SPACE=$(df -BG --output=avail / | tail -1 | tr -d ' ')
CPU_CORES=$(nproc)
TOTAL_RAM=$(free -g | awk '/Mem:/ {print $2}')

echo -e "\n${BOLD}Your System Resources:${NC}"
echo -e "· Available Storage: ${AVAILABLE_SPACE}B"
echo -e "· CPU Cores: ${CPU_CORES}"
echo -e "· Total RAM: ${TOTAL_RAM}GB"

WARNING=""
[[ ${AVAILABLE_SPACE%G} -lt 750 ]] && WARNING+="· ${RED}Low storage space detected${NC}\n"
[[ ${CPU_CORES} -lt 4 ]] && WARNING+="· ${RED}Insufficient CPU cores detected${NC}\n"
[[ ${TOTAL_RAM} -lt 16 ]] && WARNING+="· ${RED}Insufficient RAM detected${NC}\n"

if [[ -n "$WARNING" ]]; then
    echo -e "\n${RED}Potential Issues Found:${NC}"
    printf "$WARNING"
    read -p "Continue installation despite warnings? [y/N]: " CONTINUE
    CONTINUE=${CONTINUE:-N}
    [[ "$CONTINUE" =~ [yY] ]] || exit 1
fi

echo -e "${CYAN}----------------------------------------${NC}"

# ---- 0. Check Prerequisites ----
echo -e "${CYAN}Checking for prerequisites...${NC}"

for cmd in docker curl sudo openssl; do
  command -v $cmd >/dev/null 2>&1 || fail "$cmd is not installed. Please install it and rerun."
done

if ! (docker info >/dev/null 2>&1); then
  fail "Docker is not running. Please start Docker and rerun."
fi

if docker compose version >/dev/null 2>&1; then
  COMPOSE_CMD="docker compose"
elif command -v docker-compose >/dev/null 2>&1; then
  COMPOSE_CMD="docker-compose"
else
  fail "Docker Compose is not installed. Please install it and rerun."
fi

echo -e "${GREEN}All prerequisites found.${NC}"

# ---- 1. Create Directory Structure ----
echo -e "${CYAN}Creating directory structure...${NC}"
mkdir -p Ethereum/{Execution,Consensus}
cd Ethereum

# ---- 2. Generate Fresh JWT Secret ----
echo -e "${CYAN}Generating JWT secret...${NC}"
openssl rand -hex 32 | tr -d "\n" > jwt.hex || fail "Failed to create jwt.hex"
chmod 644 jwt.hex
echo -e "${GREEN}JWT secret created.${NC}"

# ---- 3. Create Whitelist File ----
echo -e "${CYAN}Creating whitelist file...${NC}"
echo "127.0.0.1/32" > whitelist.lst || fail "Failed to create whitelist.lst"
echo -e "${GREEN}Whitelist file created.${NC}"

# ---- 4. Write Docker Compose File ----
echo -e "${CYAN}Writing Docker Compose file...${NC}"
cat > docker-compose.yml <<EOF
version: "3.8"
services:
  erigon:
    image: erigontech/erigon:latest
    container_name: erigon
    restart: unless-stopped
    command:
      - --chain=sepolia
      - --authrpc.jwtsecret=/jwt.hex
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --http
      - --http.api=eth,erigon,web3,net,debug
      - --prune.mode=full
      - --maxpeers=100
    volumes:
      - ./Execution:/home/erigon/.local/share/erigon
      - ./jwt.hex:/jwt.hex
    ports:
      - 8545:8545
      - 8551:8551
      - 30303:30303/tcp
      - 30303:30303/udp

  lighthouse:
    image: sigp/lighthouse:latest
    container_name: lighthouse
    restart: unless-stopped
    depends_on:
      - erigon
    command:
      - lighthouse
      - beacon_node
      - --network=sepolia
      - --execution-endpoint=http://erigon:8551
      - --execution-jwt=/jwt.hex
      - --checkpoint-sync-url=https://checkpoint-sync.sepolia.ethpandaops.io/
      - --http
      - --http-port=5052
      - --target-peers=100
    volumes:
      - ./Consensus:/data
      - ./jwt.hex:/jwt.hex
    ports:
      - 9000:9000/tcp
      - 9000:9000/udp
      - 5052:5052

  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    restart: unless-stopped
    depends_on:
      - erigon
      - lighthouse
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./whitelist.lst:/etc/haproxy/whitelist.lst
    ports:
      - 80:80
      - 443:443

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - 9999:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
EOF
echo -e "${GREEN}Docker Compose file written.${NC}"

# ---- 5. Write HAProxy Config ----
echo -e "${CYAN}Writing HAProxy config...${NC}"
cat > haproxy.cfg <<EOF
global
    maxconn 200000
    nbthread 16
    cpu-map 1-16 0-15
    tune.bufsize 32768
    tune.ssl.default-dh-param 2048

defaults
    timeout connect 2s
    timeout client 30s
    timeout server 30s
    option http-server-close
    option forwardfor
    maxconn 200000

frontend http-in
    bind *:80
    bind *:443
    mode http
    option httplog
    acl valid_ip src -f /etc/haproxy/whitelist.lst
    http-request deny if !valid_ip

    use_backend erigon_backend if { path_beg /erigon/ }
    use_backend lighthouse_backend if { path_beg /lighthouse/ }
    default_backend erigon_backend

backend erigon_backend
    mode http
    balance leastconn
    option http-server-close
    option forwardfor
    server erigon1 erigon:8545 maxconn 100000 check inter 2s

backend lighthouse_backend
    mode http
    balance leastconn
    option http-server-close
    option forwardfor
    server lighthouse1 lighthouse:5052 maxconn 100000 check inter 2s
EOF
echo -e "${GREEN}HAProxy config written.${NC}"

# ---- 6. Fix Permissions ----
echo -e "${CYAN}Fixing permissions...${NC}"
sudo chown -R 1000:1000 Execution Consensus
echo -e "${GREEN}Permissions fixed.${NC}"

# ---- 7. Start Services ----
echo -e "${CYAN}Starting Docker stack...${NC}"
$COMPOSE_CMD up -d
echo -e "${GREEN}Docker stack started.${NC}"

# ---- 8. Configure Firewall ----
echo -e "${CYAN}Configuring firewall...${NC}"
if command -v ufw >/dev/null 2>&1; then
  sudo ufw allow 22/tcp
  sudo ufw allow 80/tcp
  sudo ufw allow 443/tcp
  sudo ufw allow 30303/tcp
  sudo ufw allow 30303/udp
  sudo ufw allow 9000/tcp
  sudo ufw allow 9000/udp
  sudo ufw allow 5052/tcp
  sudo ufw allow 8545/tcp
  sudo ufw allow 8551/tcp
  sudo ufw allow 9999/tcp
  sudo ufw --force enable
  echo -e "${GREEN}Firewall configured.${NC}"
else
  echo -e "${YELLOW}UFW not found. Firewall setup skipped.${NC}"
fi

# ---- 9. Final Output ----
PUBLIC_IP=$(curl -4 -s ifconfig.me)
echo -e "${CYAN}========================================"
echo -e "         ETHEREUM SEPOLIA NODE STATUS"
echo -e "========================================${NC}"
echo -e "${BOLD}Local Access:${NC}"
echo -e "· Erigon RPC:   ${GREEN}http://127.0.0.1/erigon/${NC}"
echo -e "· Beacon RPC:   ${GREEN}http://127.0.0.1/lighthouse/${NC}"
echo -e "\n${BOLD}Remote Access:${NC}"
echo -e "· Erigon RPC:   ${GREEN}http://${PUBLIC_IP}/erigon/${NC}"
echo -e "· Beacon RPC:   ${GREEN}http://${PUBLIC_IP}/lighthouse/${NC}"
echo -e "· Dozzle:       ${GREEN}http://${PUBLIC_IP}:9999/${NC}"
echo -e "${CYAN}========================================${NC}"

echo -e "\n${GREEN}Setup complete. Node is syncing!${NC}"
