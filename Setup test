#!/bin/bash
set -e

# ---- Colors ----
NC='\033[0m'
BOLD='\033[1m'
GREEN='\033[32m'
RED='\033[31m'
YELLOW='\033[33m'
CYAN='\033[36m'
LINK='\033[36m'

fail() { echo -e "${RED}ERROR:${NC} $1"; exit 1; }

echo -e "${CYAN}========================================"
echo -e "     ETHEREUM SEPOLIA NODE INSTALLER"
echo -e "========================================${NC}"

for cmd in docker curl sudo openssl; do
  command -v $cmd >/dev/null 2>&1 || fail "$cmd is not installed. Please install it and rerun."
done

if ! (docker info >/dev/null 2>&1); then
  fail "Docker is not running. Please start Docker and rerun."
fi

if docker compose version >/dev/null 2>&1; then
  COMPOSE_CMD="docker compose"
elif command -v docker-compose >/dev/null 2>&1; then
  COMPOSE_CMD="docker-compose"
else
  fail "Docker Compose is not installed. Please install it and rerun."
fi

mkdir -p Ethereum/Execution Ethereum/Consensus
cd Ethereum

if [ ! -f jwt.hex ]; then
  openssl rand -hex 32 | tr -d "\n" > jwt.hex || fail "Failed to create jwt.hex"
fi

if [ ! -f whitelist.lst ]; then
  echo "127.0.0.1/32" > whitelist.lst || fail "Failed to create whitelist.lst"
fi

cat > docker-compose.yml <<EOF
version: "3.8"
services:
  erigon:
    image: erigontech/erigon:latest
    container_name: erigon
    restart: unless-stopped
    command:
      - --chain=sepolia
      - --externalcl
      - --authrpc.jwtsecret=/jwt.hex
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --http
      - --http.api=eth,erigon,web3,net,debug
      - --prune.mode=full
      - --maxpeers=100
    volumes:
      - ./Execution:/home/erigon/.local/share/erigon
      - ./jwt.hex:/jwt.hex
    ports:
      - 8545:8545
      - 8551:8551
      - 30303:30303/tcp
      - 30303:30303/udp

  lighthouse:
    image: sigp/lighthouse:latest
    container_name: lighthouse
    restart: unless-stopped
    depends_on:
      - erigon
    command:
      - lighthouse
      - beacon_node
      - --network=sepolia
      - --execution-endpoint=http://erigon:8551
      - --execution-jwt=/jwt.hex
      - --checkpoint-sync-url=https://sepolia.checkpoint.sigp.io
      - --http
      - --http-port=5052
      - --enable-blobs
      - --enable-blob-sidecars
      - --target-peers=100
    volumes:
      - ./Consensus:/data
      - ./jwt.hex:/jwt.hex
    ports:
      - 9000:9000/tcp
      - 9000:9000/udp
      - 5052:5052

  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    restart: unless-stopped
    depends_on:
      - erigon
      - lighthouse
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./whitelist.lst:/etc/haproxy/whitelist.lst
    ports:
      - 80:80
      - 443:443

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - 9999:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
EOF

cat > haproxy.cfg <<EOF
global
    maxconn 200000
    nbthread 16
    cpu-map 1-16 0-15
    tune.bufsize 32768
    tune.ssl.default-dh-param 2048

defaults
    timeout connect 2s
    timeout client 30s
    timeout server 30s
    option http-server-close
    option forwardfor
    maxconn 200000

frontend http-in
    bind *:80
    bind *:443
    mode http
    option httplog
    acl valid_ip src -f /etc/haproxy/whitelist.lst
    http-request deny if !valid_ip

    use_backend erigon_backend if { path_beg /erigon/ }
    use_backend lighthouse_backend if { path_beg /lighthouse/ }
    default_backend erigon_backend

backend erigon_backend
    mode http
    balance leastconn
    option http-server-close
    option forwardfor
    server erigon1 erigon:8545 maxconn 100000 check inter 2s

backend lighthouse_backend
    mode http
    balance leastconn
    option http-server-close
    option forwardfor
    server lighthouse1 lighthouse:5052 maxconn 100000 check inter 2s
EOF

$COMPOSE_CMD config >/dev/null 2>&1 || fail "docker-compose.yml is invalid. Please check the file."
$COMPOSE_CMD pull || fail "Failed to pull images. Check your internet connection or Docker Hub access."
$COMPOSE_CMD up -d || fail "Failed to start Docker Compose stack."

if command -v ufw >/dev/null 2>&1; then
  sudo ufw allow 22/tcp
  sudo ufw allow 80/tcp
  sudo ufw allow 443/tcp
  sudo ufw allow 30303/tcp
  sudo ufw allow 30303/udp
  sudo ufw allow 9000/tcp
  sudo ufw allow 9000/udp
  sudo ufw allow 5052/tcp
  sudo ufw allow 8545/tcp
  sudo ufw allow 8551/tcp
  sudo ufw allow 9999/tcp
  sudo ufw --force enable
  sudo ufw status verbose
fi

LOCAL_IP="127.0.0.1"
SERVER_IP=$(hostname -I | awk '{print $1}')
PUBLIC_IP=$(curl -4 -s ifconfig.me || echo $SERVER_IP)
REMOTE_IP=$PUBLIC_IP

echo -e "${CYAN}========================================"
echo -e "         ETHEREUM SEPOLIA NODE STATUS"
echo -e "========================================${NC}"

echo -e "${BOLD}Local (Aztec in same VPS)${NC}"
echo -e "· Sepolia RPC    : ${GREEN}✔${NC} ${LINK}http://127.0.0.1/erigon/${NC}"
echo -e "· Beacon RPC     : ${GREEN}✔${NC} ${LINK}http://127.0.0.1/lighthouse/${NC}"

echo -e "\n${BOLD}Remote (Aztec in other VPS)${NC}"
echo -e "· Sepolia RPC    : ${GREEN}✔${NC} ${LINK}http://${REMOTE_IP}/erigon/${NC}"
echo -e "· Beacon RPC     : ${GREEN}✔${NC} ${LINK}http://${REMOTE_IP}/lighthouse/${NC}"

echo -e "\n${BOLD}Monitoring${NC}"
echo -e "· Dozzle         : ${GREEN}✔${NC} ${LINK}http://${REMOTE_IP}:9999/${NC}"

echo -e "\n${BOLD}Whitelist file${NC}"
echo -e "· ${YELLOW}Ethereum/whitelist.lst${NC}"

echo -e "${CYAN}----------------------------------------${NC}"
echo -e "${BOLD}Example L2/L3 usage:${NC}"
echo -e "${CYAN}----------------------------------------${NC}"
echo -e "${LINK}--l1-rpc-urls http://${REMOTE_IP}/erigon/"
echo -e "--l1-consensus-host-urls http://${REMOTE_IP}/lighthouse/${NC}"
echo -e "${CYAN}----------------------------------------${NC}"

echo -e "${BOLD}To whitelist more IPs:${NC} edit ${YELLOW}Ethereum/whitelist.lst${NC} then:"
echo -e "  sudo docker restart haproxy"

echo -e "${CYAN}----------------------------------------${NC}"
echo -e "${BOLD}Firewall:${NC} allows SSH/HTTP/HTTPS only"
echo -e "${CYAN}========================================${NC}"

# ---- 11. Offer to Add Whitelist IP ----
echo ""
read -p "Add IP to whitelist for remote access? [Y/n]: " ADD_WL
ADD_WL=${ADD_WL:-Y}

if [[ "$ADD_WL" =~ ^[Yy]$ ]]; then
  echo "ℹ️  Your remote IP appears to be: ${REMOTE_IP}"
  read -p "Enter IP/CIDR to whitelist (default ${REMOTE_IP}/32): " WL_IP
  WL_IP=${WL_IP:-${REMOTE_IP}/32}

  if [[ "$WL_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?$ ]]; then
    if grep -qxF "$WL_IP" whitelist.lst; then
      echo -e "${YELLOW}IP $WL_IP is already whitelisted.${NC}"
    else
      echo "$WL_IP" >> whitelist.lst
      echo -e "${GREEN}Added $WL_IP to whitelist.${NC}"
      echo "Restarting HAProxy container to apply changes..."
      sudo docker restart haproxy
      echo -e "${GREEN}HAProxy restarted.${NC}"
    fi
  else
    echo -e "${RED}Invalid IP format. Please edit Ethereum/whitelist.lst manually.${NC}"
  fi
fi

echo ""
echo -e "${GREEN}Setup complete. Enjoy your Sepolia node!${NC}"
